!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";t.r(e);const r=n=>Math.floor(n/10),o=n=>n%10,i=(n,e)=>((n,e)=>(n&e)>0)(n,e)?1:0,u=(n=new Date)=>(n=>[r(n.getHours()),o(n.getHours()),r(n.getMinutes()),o(n.getMinutes()),r(n.getSeconds()),o(n.getSeconds())])(n).map(n=>(n=>[i(8,n),i(4,n),i(2,n),i(1,n)])(n));var c=function(n){return(t=document.getElementsByClassName("clock-div"),e=t,[].slice.call(e)).forEach(function(e){return function(n,e){n.innerHTML=function(n){return'<div class="time">\n'+n.map(function(n){return function(n){return'  <div class="digit">\n    '+n.map(function(n){return function(n){return'<div class="bit '+(n?"on":"off")+'">'+n+"</div>"}(n)}).join("\n    ")+"\n  </div>"}(n)}).join("\n")+"\n</div>"}(e)}(e,n)});var e,t},f=function(){return document.getElementById("clock-canvas")},l=function(n){!function(n){var e=n.slice(0,4),t=f();t.style.display="none",function(n,e,t,r){var o=n.getContext("2d");o.clearRect(0,0,n.width,n.height),e.forEach(function(n,e){n.forEach(function(n,i){!function(n,e,t,r,o,i){n.fillStyle=function(n){return n?"rgb(255, 255, 255)":"rgb(0, 0, 0)"}(e),n.fillRect(t*o,r*i,o,i)}(o,n,e,i,t,r)})})}(t,e,t.width/e.length,t.height/e[0].length)}(n);var e=document.getElementById("favicon"),t=e.cloneNode(!0);t.href=f().toDataURL(),e.parentNode.replaceChild(t,e)},a=function(){var n=u();c(n),l(n)};setInterval(a,1e3),a()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,